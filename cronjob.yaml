apiVersion: v1
items:
- apiVersion: batch/v1
  kind: CronJob
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"batch/v1","kind":"CronJob","metadata":{"annotations":{},"name":"delete-old-pipelineruns-pvcs","namespace":"devtools-gitops-managed-service"},"spec":{"failedJobsHistoryLimit":1,"jobTemplate":{"spec":{"template":{"spec":{"containers":[{"command":["/bin/bash","-c","# Check if the Quota is below the limit, and exit if it is:\nif (( $(kubectl get resourcequota devtools-gitops-managed-service-quota -n devtools-gitops-managed-service --template='{{.status.used.persistentvolumeclaims}}') \u003c 8 )); then exit 0; fi\n# Get all PVCs except \"install-dir\" and the two latest from pipelineruns:\npvcs=$(kubectl get pvc -n devtools-gitops-managed-service --field-selector metadata.name!=install-dir --sort-by=.metadata.creationTimestamp -o=jsonpath='{.items[:5].metadata.name}')\n# Delete PVCs, patching them after deletion to prevent finalizer to block the job:\nfor p in ${pvcs}; do kubectl delete \"${p}\" -n devtools-gitops-managed-service \u0026\u0026 kubectl patch \"${p}\" -n devtools-gitops-managed-service -p '{\"metadata\":{\"finalizers\":null}}'; done\n# Print to stdout and exit\necho \"PVCs cleaned up successfully\" \u003e /dev/stdout\nexit 0\n"],"image":"quay.io/bluengop/kontainerized-kuttl","imagePullPolicy":"IfNotPresent","name":"delete-old-pipelineruns-pvcs-0"}],"restartPolicy":"OnFailure","serviceAccountName":"pipeline"}}}},"schedule":"*/30 * * * *","successfulJobsHistoryLimit":1}}
    creationTimestamp: "2023-02-14T17:08:24Z"
    generation: 4
    name: delete-old-pipelineruns-pvcs
    namespace: devtools-gitops-managed-service
    resourceVersion: "2781404773"
    uid: 4b04742e-e553-44a0-bfc5-63b217bcd5d9
  spec:
    concurrencyPolicy: Allow
    failedJobsHistoryLimit: 1
    jobTemplate:
      metadata:
        creationTimestamp: null
      spec:
        template:
          metadata:
            creationTimestamp: null
          spec:
            containers:
            - command:
              - /bin/bash
              - -c
              - "# Check if the Quota is below the limit, and exit if it is:\nif ((
                $(kubectl get resourcequota devtools-gitops-managed-service-quota
                -n devtools-gitops-managed-service --template='{{.status.used.persistentvolumeclaims}}')
                < 8 )); then exit 0; fi\n# Get all PVCs except \"install-dir\" and
                the two latest from pipelineruns:\nexport pvcs=$(kubectl get pvc -n
                devtools-gitops-managed-service --field-selector metadata.name!=install-dir
                --sort-by=.metadata.creationTimestamp -o=jsonpath='{.items[:5].metadata.name}'
                | tr ' ' '\\n')\n# Delete PVCs, patching them after deletion to prevent
                finalizer to block the job:\nfor p in $(echo ${pvcs}); do kubectl
                delete pvc \"${p}\" -n devtools-gitops-managed-service &; kubectl
                patch pvc \"${p}\" -n devtools-gitops-managed-service -p '{\"metadata\":{\"finalizers\":null}}';
                done \n# Print to stdout and exit\necho \"PVCs cleaned up successfully\"
                > /dev/stdout\nsleep 15\nexit 0\n"
              image: quay.io/bluengop/kontainerized-kuttl:latest
              imagePullPolicy: IfNotPresent
              name: delete-old-pipelineruns-pvcs-0
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: OnFailure
            schedulerName: default-scheduler
            securityContext: {}
            serviceAccount: pipeline
            serviceAccountName: pipeline
            terminationGracePeriodSeconds: 30
        ttlSecondsAfterFinished: 100
    schedule: '*/30 * * * *'
    successfulJobsHistoryLimit: 1
    suspend: false
  status:
    lastScheduleTime: "2023-02-15T09:30:00Z"
    lastSuccessfulTime: "2023-02-15T09:30:18Z"
kind: List
metadata:
  resourceVersion: ""
